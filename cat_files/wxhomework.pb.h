// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/wxhomework.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fwxhomework_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fwxhomework_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fmain_2fproto_2fwxhomework_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto;
namespace wxhomework {
class CCATResponse;
class CCATResponseDefaultTypeInternal;
extern CCATResponseDefaultTypeInternal _CCATResponse_default_instance_;
class JokeRequest;
class JokeRequestDefaultTypeInternal;
extern JokeRequestDefaultTypeInternal _JokeRequest_default_instance_;
class JokeResponse;
class JokeResponseDefaultTypeInternal;
extern JokeResponseDefaultTypeInternal _JokeResponse_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PraiseRequest;
class PraiseRequestDefaultTypeInternal;
extern PraiseRequestDefaultTypeInternal _PraiseRequest_default_instance_;
class PraiseResponse;
class PraiseResponseDefaultTypeInternal;
extern PraiseResponseDefaultTypeInternal _PraiseResponse_default_instance_;
class ReceiveMessageRequest;
class ReceiveMessageRequestDefaultTypeInternal;
extern ReceiveMessageRequestDefaultTypeInternal _ReceiveMessageRequest_default_instance_;
class ReceiverMessageResponse;
class ReceiverMessageResponseDefaultTypeInternal;
extern ReceiverMessageResponseDefaultTypeInternal _ReceiverMessageResponse_default_instance_;
class SendMessageRequest;
class SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class SendMessageResponse;
class SendMessageResponseDefaultTypeInternal;
extern SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserLoginResponse;
class UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
class UserPasswordChangeResponse;
class UserPasswordChangeResponseDefaultTypeInternal;
extern UserPasswordChangeResponseDefaultTypeInternal _UserPasswordChangeResponse_default_instance_;
class UserRegisterResponse;
class UserRegisterResponseDefaultTypeInternal;
extern UserRegisterResponseDefaultTypeInternal _UserRegisterResponse_default_instance_;
}  // namespace wxhomework
PROTOBUF_NAMESPACE_OPEN
template<> ::wxhomework::CCATResponse* Arena::CreateMaybeMessage<::wxhomework::CCATResponse>(Arena*);
template<> ::wxhomework::JokeRequest* Arena::CreateMaybeMessage<::wxhomework::JokeRequest>(Arena*);
template<> ::wxhomework::JokeResponse* Arena::CreateMaybeMessage<::wxhomework::JokeResponse>(Arena*);
template<> ::wxhomework::Message* Arena::CreateMaybeMessage<::wxhomework::Message>(Arena*);
template<> ::wxhomework::PraiseRequest* Arena::CreateMaybeMessage<::wxhomework::PraiseRequest>(Arena*);
template<> ::wxhomework::PraiseResponse* Arena::CreateMaybeMessage<::wxhomework::PraiseResponse>(Arena*);
template<> ::wxhomework::ReceiveMessageRequest* Arena::CreateMaybeMessage<::wxhomework::ReceiveMessageRequest>(Arena*);
template<> ::wxhomework::ReceiverMessageResponse* Arena::CreateMaybeMessage<::wxhomework::ReceiverMessageResponse>(Arena*);
template<> ::wxhomework::SendMessageRequest* Arena::CreateMaybeMessage<::wxhomework::SendMessageRequest>(Arena*);
template<> ::wxhomework::SendMessageResponse* Arena::CreateMaybeMessage<::wxhomework::SendMessageResponse>(Arena*);
template<> ::wxhomework::User* Arena::CreateMaybeMessage<::wxhomework::User>(Arena*);
template<> ::wxhomework::UserInfoRequest* Arena::CreateMaybeMessage<::wxhomework::UserInfoRequest>(Arena*);
template<> ::wxhomework::UserLoginResponse* Arena::CreateMaybeMessage<::wxhomework::UserLoginResponse>(Arena*);
template<> ::wxhomework::UserPasswordChangeResponse* Arena::CreateMaybeMessage<::wxhomework::UserPasswordChangeResponse>(Arena*);
template<> ::wxhomework::UserRegisterResponse* Arena::CreateMaybeMessage<::wxhomework::UserRegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wxhomework {

// ===================================================================

class UserInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.UserInfoRequest) */ {
 public:
  UserInfoRequest();
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.UserInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kEncodePasswordFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string encodePassword = 2;
  void clear_encodepassword();
  const std::string& encodepassword() const;
  void set_encodepassword(const std::string& value);
  void set_encodepassword(std::string&& value);
  void set_encodepassword(const char* value);
  void set_encodepassword(const char* value, size_t size);
  std::string* mutable_encodepassword();
  std::string* release_encodepassword();
  void set_allocated_encodepassword(std::string* encodepassword);

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:wxhomework.UserInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encodepassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class UserLoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.UserLoginResponse) */ {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponse* New() const final {
    return CreateMaybeMessage<UserLoginResponse>(nullptr);
  }

  UserLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.UserLoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // .wxhomework.User user = 2;
  bool has_user() const;
  void clear_user();
  const ::wxhomework::User& user() const;
  ::wxhomework::User* release_user();
  ::wxhomework::User* mutable_user();
  void set_allocated_user(::wxhomework::User* user);

  // @@protoc_insertion_point(class_scope:wxhomework.UserLoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::wxhomework::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class UserPasswordChangeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.UserPasswordChangeResponse) */ {
 public:
  UserPasswordChangeResponse();
  virtual ~UserPasswordChangeResponse();

  UserPasswordChangeResponse(const UserPasswordChangeResponse& from);
  UserPasswordChangeResponse(UserPasswordChangeResponse&& from) noexcept
    : UserPasswordChangeResponse() {
    *this = ::std::move(from);
  }

  inline UserPasswordChangeResponse& operator=(const UserPasswordChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPasswordChangeResponse& operator=(UserPasswordChangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPasswordChangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPasswordChangeResponse* internal_default_instance() {
    return reinterpret_cast<const UserPasswordChangeResponse*>(
               &_UserPasswordChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserPasswordChangeResponse& a, UserPasswordChangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPasswordChangeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPasswordChangeResponse* New() const final {
    return CreateMaybeMessage<UserPasswordChangeResponse>(nullptr);
  }

  UserPasswordChangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPasswordChangeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPasswordChangeResponse& from);
  void MergeFrom(const UserPasswordChangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPasswordChangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.UserPasswordChangeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:wxhomework.UserPasswordChangeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.UserRegisterResponse) */ {
 public:
  UserRegisterResponse();
  virtual ~UserRegisterResponse();

  UserRegisterResponse(const UserRegisterResponse& from);
  UserRegisterResponse(UserRegisterResponse&& from) noexcept
    : UserRegisterResponse() {
    *this = ::std::move(from);
  }

  inline UserRegisterResponse& operator=(const UserRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterResponse& operator=(UserRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const UserRegisterResponse*>(
               &_UserRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserRegisterResponse& a, UserRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterResponse* New() const final {
    return CreateMaybeMessage<UserRegisterResponse>(nullptr);
  }

  UserRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegisterResponse& from);
  void MergeFrom(const UserRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.UserRegisterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:wxhomework.UserRegisterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class PraiseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.PraiseRequest) */ {
 public:
  PraiseRequest();
  virtual ~PraiseRequest();

  PraiseRequest(const PraiseRequest& from);
  PraiseRequest(PraiseRequest&& from) noexcept
    : PraiseRequest() {
    *this = ::std::move(from);
  }

  inline PraiseRequest& operator=(const PraiseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PraiseRequest& operator=(PraiseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PraiseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PraiseRequest* internal_default_instance() {
    return reinterpret_cast<const PraiseRequest*>(
               &_PraiseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PraiseRequest& a, PraiseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PraiseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PraiseRequest* New() const final {
    return CreateMaybeMessage<PraiseRequest>(nullptr);
  }

  PraiseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PraiseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PraiseRequest& from);
  void MergeFrom(const PraiseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PraiseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.PraiseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string messageId = 3;
  void clear_messageid();
  const std::string& messageid() const;
  void set_messageid(const std::string& value);
  void set_messageid(std::string&& value);
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  std::string* mutable_messageid();
  std::string* release_messageid();
  void set_allocated_messageid(std::string* messageid);

  // @@protoc_insertion_point(class_scope:wxhomework.PraiseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class PraiseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.PraiseResponse) */ {
 public:
  PraiseResponse();
  virtual ~PraiseResponse();

  PraiseResponse(const PraiseResponse& from);
  PraiseResponse(PraiseResponse&& from) noexcept
    : PraiseResponse() {
    *this = ::std::move(from);
  }

  inline PraiseResponse& operator=(const PraiseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PraiseResponse& operator=(PraiseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PraiseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PraiseResponse* internal_default_instance() {
    return reinterpret_cast<const PraiseResponse*>(
               &_PraiseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PraiseResponse& a, PraiseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PraiseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PraiseResponse* New() const final {
    return CreateMaybeMessage<PraiseResponse>(nullptr);
  }

  PraiseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PraiseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PraiseResponse& from);
  void MergeFrom(const PraiseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PraiseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.PraiseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wxhomework.PraiseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class ReceiveMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.ReceiveMessageRequest) */ {
 public:
  ReceiveMessageRequest();
  virtual ~ReceiveMessageRequest();

  ReceiveMessageRequest(const ReceiveMessageRequest& from);
  ReceiveMessageRequest(ReceiveMessageRequest&& from) noexcept
    : ReceiveMessageRequest() {
    *this = ::std::move(from);
  }

  inline ReceiveMessageRequest& operator=(const ReceiveMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveMessageRequest& operator=(ReceiveMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceiveMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiveMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ReceiveMessageRequest*>(
               &_ReceiveMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReceiveMessageRequest& a, ReceiveMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceiveMessageRequest* New() const final {
    return CreateMaybeMessage<ReceiveMessageRequest>(nullptr);
  }

  ReceiveMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceiveMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceiveMessageRequest& from);
  void MergeFrom(const ReceiveMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.ReceiveMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:wxhomework.ReceiveMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.SendMessageRequest) */ {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.SendMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTokenFieldNumber = 3,
    kMessageFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // .wxhomework.Message message = 2;
  bool has_message() const;
  void clear_message();
  const ::wxhomework::Message& message() const;
  ::wxhomework::Message* release_message();
  ::wxhomework::Message* mutable_message();
  void set_allocated_message(::wxhomework::Message* message);

  // @@protoc_insertion_point(class_scope:wxhomework.SendMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::wxhomework::Message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.SendMessageResponse) */ {
 public:
  SendMessageResponse();
  virtual ~SendMessageResponse();

  SendMessageResponse(const SendMessageResponse& from);
  SendMessageResponse(SendMessageResponse&& from) noexcept
    : SendMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResponse& operator=(SendMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponse*>(
               &_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendMessageResponse& a, SendMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageResponse* New() const final {
    return CreateMaybeMessage<SendMessageResponse>(nullptr);
  }

  SendMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.SendMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wxhomework.SendMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class ReceiverMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.ReceiverMessageResponse) */ {
 public:
  ReceiverMessageResponse();
  virtual ~ReceiverMessageResponse();

  ReceiverMessageResponse(const ReceiverMessageResponse& from);
  ReceiverMessageResponse(ReceiverMessageResponse&& from) noexcept
    : ReceiverMessageResponse() {
    *this = ::std::move(from);
  }

  inline ReceiverMessageResponse& operator=(const ReceiverMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiverMessageResponse& operator=(ReceiverMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceiverMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiverMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ReceiverMessageResponse*>(
               &_ReceiverMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReceiverMessageResponse& a, ReceiverMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiverMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceiverMessageResponse* New() const final {
    return CreateMaybeMessage<ReceiverMessageResponse>(nullptr);
  }

  ReceiverMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceiverMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceiverMessageResponse& from);
  void MergeFrom(const ReceiverMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiverMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.ReceiverMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // string messageId = 1;
  void clear_messageid();
  const std::string& messageid() const;
  void set_messageid(const std::string& value);
  void set_messageid(std::string&& value);
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  std::string* mutable_messageid();
  std::string* release_messageid();
  void set_allocated_messageid(std::string* messageid);

  // @@protoc_insertion_point(class_scope:wxhomework.ReceiverMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
    kContentFieldNumber = 3,
    kSharePersonNumsFieldNumber = 4,
    kShareDoctorNumsFieldNumber = 5,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string createTime = 2;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // sint32 sharePersonNums = 4;
  void clear_sharepersonnums();
  ::PROTOBUF_NAMESPACE_ID::int32 sharepersonnums() const;
  void set_sharepersonnums(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 shareDoctorNums = 5;
  void clear_sharedoctornums();
  ::PROTOBUF_NAMESPACE_ID::int32 sharedoctornums() const;
  void set_sharedoctornums(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:wxhomework.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 sharepersonnums_;
  ::PROTOBUF_NAMESPACE_ID::int32 sharedoctornums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class CCATResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.CCATResponse) */ {
 public:
  CCATResponse();
  virtual ~CCATResponse();

  CCATResponse(const CCATResponse& from);
  CCATResponse(CCATResponse&& from) noexcept
    : CCATResponse() {
    *this = ::std::move(from);
  }

  inline CCATResponse& operator=(const CCATResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCATResponse& operator=(CCATResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCATResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCATResponse* internal_default_instance() {
    return reinterpret_cast<const CCATResponse*>(
               &_CCATResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCATResponse& a, CCATResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CCATResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCATResponse* New() const final {
    return CreateMaybeMessage<CCATResponse>(nullptr);
  }

  CCATResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCATResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCATResponse& from);
  void MergeFrom(const CCATResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCATResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.CCATResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .wxhomework.User user = 1;
  bool has_user() const;
  void clear_user();
  const ::wxhomework::User& user() const;
  ::wxhomework::User* release_user();
  ::wxhomework::User* mutable_user();
  void set_allocated_user(::wxhomework::User* user);

  // @@protoc_insertion_point(class_scope:wxhomework.CCATResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::wxhomework::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kMidFieldNumber = 4,
    kNickNameFieldNumber = 5,
    kLevelFieldNumber = 6,
    kHeadUrlFieldNumber = 7,
    kVideoUrlFieldNumber = 8,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string mid = 4;
  void clear_mid();
  const std::string& mid() const;
  void set_mid(const std::string& value);
  void set_mid(std::string&& value);
  void set_mid(const char* value);
  void set_mid(const char* value, size_t size);
  std::string* mutable_mid();
  std::string* release_mid();
  void set_allocated_mid(std::string* mid);

  // string nick_name = 5;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);

  // string level = 6;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);

  // string head_url = 7;
  void clear_head_url();
  const std::string& head_url() const;
  void set_head_url(const std::string& value);
  void set_head_url(std::string&& value);
  void set_head_url(const char* value);
  void set_head_url(const char* value, size_t size);
  std::string* mutable_head_url();
  std::string* release_head_url();
  void set_allocated_head_url(std::string* head_url);

  // string video_url = 8;
  void clear_video_url();
  const std::string& video_url() const;
  void set_video_url(const std::string& value);
  void set_video_url(std::string&& value);
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  std::string* mutable_video_url();
  std::string* release_video_url();
  void set_allocated_video_url(std::string* video_url);

  // @@protoc_insertion_point(class_scope:wxhomework.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class JokeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.JokeRequest) */ {
 public:
  JokeRequest();
  virtual ~JokeRequest();

  JokeRequest(const JokeRequest& from);
  JokeRequest(JokeRequest&& from) noexcept
    : JokeRequest() {
    *this = ::std::move(from);
  }

  inline JokeRequest& operator=(const JokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JokeRequest& operator=(JokeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JokeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JokeRequest* internal_default_instance() {
    return reinterpret_cast<const JokeRequest*>(
               &_JokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JokeRequest& a, JokeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JokeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JokeRequest* New() const final {
    return CreateMaybeMessage<JokeRequest>(nullptr);
  }

  JokeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JokeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JokeRequest& from);
  void MergeFrom(const JokeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JokeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.JokeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kTokenFieldNumber = 3,
    kNumFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // sint32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:wxhomework.JokeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// -------------------------------------------------------------------

class JokeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wxhomework.JokeResponse) */ {
 public:
  JokeResponse();
  virtual ~JokeResponse();

  JokeResponse(const JokeResponse& from);
  JokeResponse(JokeResponse&& from) noexcept
    : JokeResponse() {
    *this = ::std::move(from);
  }

  inline JokeResponse& operator=(const JokeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JokeResponse& operator=(JokeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JokeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JokeResponse* internal_default_instance() {
    return reinterpret_cast<const JokeResponse*>(
               &_JokeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(JokeResponse& a, JokeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JokeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JokeResponse* New() const final {
    return CreateMaybeMessage<JokeResponse>(nullptr);
  }

  JokeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JokeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JokeResponse& from);
  void MergeFrom(const JokeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JokeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wxhomework.JokeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto);
    return ::descriptor_table_src_2fmain_2fproto_2fwxhomework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJokeIdFieldNumber = 1,
    kJokeContentFieldNumber = 2,
  };
  // string jokeId = 1;
  void clear_jokeid();
  const std::string& jokeid() const;
  void set_jokeid(const std::string& value);
  void set_jokeid(std::string&& value);
  void set_jokeid(const char* value);
  void set_jokeid(const char* value, size_t size);
  std::string* mutable_jokeid();
  std::string* release_jokeid();
  void set_allocated_jokeid(std::string* jokeid);

  // string joke_content = 2;
  void clear_joke_content();
  const std::string& joke_content() const;
  void set_joke_content(const std::string& value);
  void set_joke_content(std::string&& value);
  void set_joke_content(const char* value);
  void set_joke_content(const char* value, size_t size);
  std::string* mutable_joke_content();
  std::string* release_joke_content();
  void set_allocated_joke_content(std::string* joke_content);

  // @@protoc_insertion_point(class_scope:wxhomework.JokeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jokeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr joke_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fwxhomework_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoRequest

// string account = 1;
inline void UserInfoRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfoRequest::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserInfoRequest.account)
  return account_.GetNoArena();
}
inline void UserInfoRequest::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserInfoRequest.account)
}
inline void UserInfoRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserInfoRequest.account)
}
inline void UserInfoRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserInfoRequest.account)
}
inline void UserInfoRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserInfoRequest.account)
}
inline std::string* UserInfoRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserInfoRequest.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfoRequest::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.UserInfoRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserInfoRequest.account)
}

// string encodePassword = 2;
inline void UserInfoRequest::clear_encodepassword() {
  encodepassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfoRequest::encodepassword() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserInfoRequest.encodePassword)
  return encodepassword_.GetNoArena();
}
inline void UserInfoRequest::set_encodepassword(const std::string& value) {
  
  encodepassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserInfoRequest.encodePassword)
}
inline void UserInfoRequest::set_encodepassword(std::string&& value) {
  
  encodepassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserInfoRequest.encodePassword)
}
inline void UserInfoRequest::set_encodepassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encodepassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserInfoRequest.encodePassword)
}
inline void UserInfoRequest::set_encodepassword(const char* value, size_t size) {
  
  encodepassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserInfoRequest.encodePassword)
}
inline std::string* UserInfoRequest::mutable_encodepassword() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserInfoRequest.encodePassword)
  return encodepassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfoRequest::release_encodepassword() {
  // @@protoc_insertion_point(field_release:wxhomework.UserInfoRequest.encodePassword)
  
  return encodepassword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoRequest::set_allocated_encodepassword(std::string* encodepassword) {
  if (encodepassword != nullptr) {
    
  } else {
    
  }
  encodepassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encodepassword);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserInfoRequest.encodePassword)
}

// string token = 3;
inline void UserInfoRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfoRequest::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserInfoRequest.token)
  return token_.GetNoArena();
}
inline void UserInfoRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserInfoRequest.token)
}
inline void UserInfoRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserInfoRequest.token)
}
inline void UserInfoRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserInfoRequest.token)
}
inline void UserInfoRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserInfoRequest.token)
}
inline std::string* UserInfoRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserInfoRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfoRequest::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.UserInfoRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserInfoRequest.token)
}

// -------------------------------------------------------------------

// UserLoginResponse

// string token = 1;
inline void UserLoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLoginResponse::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserLoginResponse.token)
  return token_.GetNoArena();
}
inline void UserLoginResponse::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserLoginResponse.token)
}
inline void UserLoginResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserLoginResponse.token)
}
inline void UserLoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserLoginResponse.token)
}
inline void UserLoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserLoginResponse.token)
}
inline std::string* UserLoginResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserLoginResponse.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.UserLoginResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserLoginResponse.token)
}

// .wxhomework.User user = 2;
inline bool UserLoginResponse::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void UserLoginResponse::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::wxhomework::User& UserLoginResponse::user() const {
  const ::wxhomework::User* p = user_;
  // @@protoc_insertion_point(field_get:wxhomework.UserLoginResponse.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::wxhomework::User*>(
      &::wxhomework::_User_default_instance_);
}
inline ::wxhomework::User* UserLoginResponse::release_user() {
  // @@protoc_insertion_point(field_release:wxhomework.UserLoginResponse.user)
  
  ::wxhomework::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::wxhomework::User* UserLoginResponse::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::wxhomework::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:wxhomework.UserLoginResponse.user)
  return user_;
}
inline void UserLoginResponse::set_allocated_user(::wxhomework::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserLoginResponse.user)
}

// -------------------------------------------------------------------

// UserPasswordChangeResponse

// string token = 1;
inline void UserPasswordChangeResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordChangeResponse::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserPasswordChangeResponse.token)
  return token_.GetNoArena();
}
inline void UserPasswordChangeResponse::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserPasswordChangeResponse.token)
}
inline void UserPasswordChangeResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserPasswordChangeResponse.token)
}
inline void UserPasswordChangeResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserPasswordChangeResponse.token)
}
inline void UserPasswordChangeResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserPasswordChangeResponse.token)
}
inline std::string* UserPasswordChangeResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserPasswordChangeResponse.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordChangeResponse::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.UserPasswordChangeResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordChangeResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserPasswordChangeResponse.token)
}

// -------------------------------------------------------------------

// UserRegisterResponse

// string token = 1;
inline void UserRegisterResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRegisterResponse::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.UserRegisterResponse.token)
  return token_.GetNoArena();
}
inline void UserRegisterResponse::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.UserRegisterResponse.token)
}
inline void UserRegisterResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.UserRegisterResponse.token)
}
inline void UserRegisterResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.UserRegisterResponse.token)
}
inline void UserRegisterResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.UserRegisterResponse.token)
}
inline std::string* UserRegisterResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.UserRegisterResponse.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRegisterResponse::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.UserRegisterResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.UserRegisterResponse.token)
}

// -------------------------------------------------------------------

// PraiseRequest

// string account = 1;
inline void PraiseRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PraiseRequest::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.PraiseRequest.account)
  return account_.GetNoArena();
}
inline void PraiseRequest::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.PraiseRequest.account)
}
inline void PraiseRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.PraiseRequest.account)
}
inline void PraiseRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.PraiseRequest.account)
}
inline void PraiseRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.PraiseRequest.account)
}
inline std::string* PraiseRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.PraiseRequest.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PraiseRequest::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.PraiseRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PraiseRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.PraiseRequest.account)
}

// string token = 2;
inline void PraiseRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PraiseRequest::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.PraiseRequest.token)
  return token_.GetNoArena();
}
inline void PraiseRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.PraiseRequest.token)
}
inline void PraiseRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.PraiseRequest.token)
}
inline void PraiseRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.PraiseRequest.token)
}
inline void PraiseRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.PraiseRequest.token)
}
inline std::string* PraiseRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.PraiseRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PraiseRequest::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.PraiseRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PraiseRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.PraiseRequest.token)
}

// string messageId = 3;
inline void PraiseRequest::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PraiseRequest::messageid() const {
  // @@protoc_insertion_point(field_get:wxhomework.PraiseRequest.messageId)
  return messageid_.GetNoArena();
}
inline void PraiseRequest::set_messageid(const std::string& value) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.PraiseRequest.messageId)
}
inline void PraiseRequest::set_messageid(std::string&& value) {
  
  messageid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.PraiseRequest.messageId)
}
inline void PraiseRequest::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.PraiseRequest.messageId)
}
inline void PraiseRequest::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.PraiseRequest.messageId)
}
inline std::string* PraiseRequest::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.PraiseRequest.messageId)
  return messageid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PraiseRequest::release_messageid() {
  // @@protoc_insertion_point(field_release:wxhomework.PraiseRequest.messageId)
  
  return messageid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PraiseRequest::set_allocated_messageid(std::string* messageid) {
  if (messageid != nullptr) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.PraiseRequest.messageId)
}

// -------------------------------------------------------------------

// PraiseResponse

// -------------------------------------------------------------------

// ReceiveMessageRequest

// string account = 1;
inline void ReceiveMessageRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReceiveMessageRequest::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.ReceiveMessageRequest.account)
  return account_.GetNoArena();
}
inline void ReceiveMessageRequest::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.ReceiveMessageRequest.account)
}
inline void ReceiveMessageRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.ReceiveMessageRequest.account)
}
inline void ReceiveMessageRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.ReceiveMessageRequest.account)
}
inline void ReceiveMessageRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.ReceiveMessageRequest.account)
}
inline std::string* ReceiveMessageRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.ReceiveMessageRequest.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceiveMessageRequest::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.ReceiveMessageRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiveMessageRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.ReceiveMessageRequest.account)
}

// string token = 2;
inline void ReceiveMessageRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReceiveMessageRequest::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.ReceiveMessageRequest.token)
  return token_.GetNoArena();
}
inline void ReceiveMessageRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.ReceiveMessageRequest.token)
}
inline void ReceiveMessageRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.ReceiveMessageRequest.token)
}
inline void ReceiveMessageRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.ReceiveMessageRequest.token)
}
inline void ReceiveMessageRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.ReceiveMessageRequest.token)
}
inline std::string* ReceiveMessageRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.ReceiveMessageRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceiveMessageRequest::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.ReceiveMessageRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiveMessageRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.ReceiveMessageRequest.token)
}

// -------------------------------------------------------------------

// SendMessageRequest

// string account = 1;
inline void SendMessageRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMessageRequest::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.SendMessageRequest.account)
  return account_.GetNoArena();
}
inline void SendMessageRequest::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.SendMessageRequest.account)
}
inline void SendMessageRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.SendMessageRequest.account)
}
inline void SendMessageRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.SendMessageRequest.account)
}
inline void SendMessageRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.SendMessageRequest.account)
}
inline std::string* SendMessageRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.SendMessageRequest.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMessageRequest::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.SendMessageRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.SendMessageRequest.account)
}

// .wxhomework.Message message = 2;
inline bool SendMessageRequest::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void SendMessageRequest::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::wxhomework::Message& SendMessageRequest::message() const {
  const ::wxhomework::Message* p = message_;
  // @@protoc_insertion_point(field_get:wxhomework.SendMessageRequest.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::wxhomework::Message*>(
      &::wxhomework::_Message_default_instance_);
}
inline ::wxhomework::Message* SendMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:wxhomework.SendMessageRequest.message)
  
  ::wxhomework::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::wxhomework::Message* SendMessageRequest::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::wxhomework::Message>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:wxhomework.SendMessageRequest.message)
  return message_;
}
inline void SendMessageRequest::set_allocated_message(::wxhomework::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:wxhomework.SendMessageRequest.message)
}

// string token = 3;
inline void SendMessageRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMessageRequest::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.SendMessageRequest.token)
  return token_.GetNoArena();
}
inline void SendMessageRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.SendMessageRequest.token)
}
inline void SendMessageRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.SendMessageRequest.token)
}
inline void SendMessageRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.SendMessageRequest.token)
}
inline void SendMessageRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.SendMessageRequest.token)
}
inline std::string* SendMessageRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.SendMessageRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMessageRequest::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.SendMessageRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.SendMessageRequest.token)
}

// -------------------------------------------------------------------

// SendMessageResponse

// -------------------------------------------------------------------

// ReceiverMessageResponse

// string messageId = 1;
inline void ReceiverMessageResponse::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReceiverMessageResponse::messageid() const {
  // @@protoc_insertion_point(field_get:wxhomework.ReceiverMessageResponse.messageId)
  return messageid_.GetNoArena();
}
inline void ReceiverMessageResponse::set_messageid(const std::string& value) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.ReceiverMessageResponse.messageId)
}
inline void ReceiverMessageResponse::set_messageid(std::string&& value) {
  
  messageid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.ReceiverMessageResponse.messageId)
}
inline void ReceiverMessageResponse::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.ReceiverMessageResponse.messageId)
}
inline void ReceiverMessageResponse::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.ReceiverMessageResponse.messageId)
}
inline std::string* ReceiverMessageResponse::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.ReceiverMessageResponse.messageId)
  return messageid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceiverMessageResponse::release_messageid() {
  // @@protoc_insertion_point(field_release:wxhomework.ReceiverMessageResponse.messageId)
  
  return messageid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiverMessageResponse::set_allocated_messageid(std::string* messageid) {
  if (messageid != nullptr) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.ReceiverMessageResponse.messageId)
}

// -------------------------------------------------------------------

// Message

// string account = 1;
inline void Message::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.Message.account)
  return account_.GetNoArena();
}
inline void Message::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.Message.account)
}
inline void Message::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.Message.account)
}
inline void Message::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.Message.account)
}
inline void Message::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.Message.account)
}
inline std::string* Message::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.Message.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.Message.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.Message.account)
}

// string createTime = 2;
inline void Message::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::createtime() const {
  // @@protoc_insertion_point(field_get:wxhomework.Message.createTime)
  return createtime_.GetNoArena();
}
inline void Message::set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.Message.createTime)
}
inline void Message::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.Message.createTime)
}
inline void Message::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.Message.createTime)
}
inline void Message::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.Message.createTime)
}
inline std::string* Message::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.Message.createTime)
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_createtime() {
  // @@protoc_insertion_point(field_release:wxhomework.Message.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.Message.createTime)
}

// string content = 3;
inline void Message::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:wxhomework.Message.content)
  return content_.GetNoArena();
}
inline void Message::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.Message.content)
}
inline void Message::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.Message.content)
}
inline void Message::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.Message.content)
}
inline std::string* Message::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.Message.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:wxhomework.Message.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.Message.content)
}

// sint32 sharePersonNums = 4;
inline void Message::clear_sharepersonnums() {
  sharepersonnums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::sharepersonnums() const {
  // @@protoc_insertion_point(field_get:wxhomework.Message.sharePersonNums)
  return sharepersonnums_;
}
inline void Message::set_sharepersonnums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sharepersonnums_ = value;
  // @@protoc_insertion_point(field_set:wxhomework.Message.sharePersonNums)
}

// sint32 shareDoctorNums = 5;
inline void Message::clear_sharedoctornums() {
  sharedoctornums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::sharedoctornums() const {
  // @@protoc_insertion_point(field_get:wxhomework.Message.shareDoctorNums)
  return sharedoctornums_;
}
inline void Message::set_sharedoctornums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sharedoctornums_ = value;
  // @@protoc_insertion_point(field_set:wxhomework.Message.shareDoctorNums)
}

// -------------------------------------------------------------------

// CCATResponse

// .wxhomework.User user = 1;
inline bool CCATResponse::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void CCATResponse::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::wxhomework::User& CCATResponse::user() const {
  const ::wxhomework::User* p = user_;
  // @@protoc_insertion_point(field_get:wxhomework.CCATResponse.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::wxhomework::User*>(
      &::wxhomework::_User_default_instance_);
}
inline ::wxhomework::User* CCATResponse::release_user() {
  // @@protoc_insertion_point(field_release:wxhomework.CCATResponse.user)
  
  ::wxhomework::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::wxhomework::User* CCATResponse::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::wxhomework::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:wxhomework.CCATResponse.user)
  return user_;
}
inline void CCATResponse::set_allocated_user(::wxhomework::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:wxhomework.CCATResponse.user)
}

// -------------------------------------------------------------------

// User

// string account = 1;
inline void User::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.account)
  return account_.GetNoArena();
}
inline void User::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.account)
}
inline void User::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.account)
}
inline void User::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.account)
}
inline void User::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.account)
}
inline std::string* User::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.User.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.account)
}

// string mid = 4;
inline void User::clear_mid() {
  mid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::mid() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.mid)
  return mid_.GetNoArena();
}
inline void User::set_mid(const std::string& value) {
  
  mid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.mid)
}
inline void User::set_mid(std::string&& value) {
  
  mid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.mid)
}
inline void User::set_mid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.mid)
}
inline void User::set_mid(const char* value, size_t size) {
  
  mid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.mid)
}
inline std::string* User::mutable_mid() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.mid)
  return mid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_mid() {
  // @@protoc_insertion_point(field_release:wxhomework.User.mid)
  
  return mid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    
  } else {
    
  }
  mid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mid);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.mid)
}

// string nick_name = 5;
inline void User::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::nick_name() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.nick_name)
  return nick_name_.GetNoArena();
}
inline void User::set_nick_name(const std::string& value) {
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.nick_name)
}
inline void User::set_nick_name(std::string&& value) {
  
  nick_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.nick_name)
}
inline void User::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.nick_name)
}
inline void User::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.nick_name)
}
inline std::string* User::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.nick_name)
  return nick_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_nick_name() {
  // @@protoc_insertion_point(field_release:wxhomework.User.nick_name)
  
  return nick_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.nick_name)
}

// string level = 6;
inline void User::clear_level() {
  level_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::level() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.level)
  return level_.GetNoArena();
}
inline void User::set_level(const std::string& value) {
  
  level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.level)
}
inline void User::set_level(std::string&& value) {
  
  level_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.level)
}
inline void User::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.level)
}
inline void User::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.level)
}
inline std::string* User::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.level)
  return level_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_level() {
  // @@protoc_insertion_point(field_release:wxhomework.User.level)
  
  return level_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.level)
}

// string head_url = 7;
inline void User::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::head_url() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.head_url)
  return head_url_.GetNoArena();
}
inline void User::set_head_url(const std::string& value) {
  
  head_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.head_url)
}
inline void User::set_head_url(std::string&& value) {
  
  head_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.head_url)
}
inline void User::set_head_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.head_url)
}
inline void User::set_head_url(const char* value, size_t size) {
  
  head_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.head_url)
}
inline std::string* User::mutable_head_url() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.head_url)
  return head_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_head_url() {
  // @@protoc_insertion_point(field_release:wxhomework.User.head_url)
  
  return head_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_head_url(std::string* head_url) {
  if (head_url != nullptr) {
    
  } else {
    
  }
  head_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.head_url)
}

// string video_url = 8;
inline void User::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::video_url() const {
  // @@protoc_insertion_point(field_get:wxhomework.User.video_url)
  return video_url_.GetNoArena();
}
inline void User::set_video_url(const std::string& value) {
  
  video_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.User.video_url)
}
inline void User::set_video_url(std::string&& value) {
  
  video_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.User.video_url)
}
inline void User::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  video_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.User.video_url)
}
inline void User::set_video_url(const char* value, size_t size) {
  
  video_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.User.video_url)
}
inline std::string* User::mutable_video_url() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.User.video_url)
  return video_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_video_url() {
  // @@protoc_insertion_point(field_release:wxhomework.User.video_url)
  
  return video_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_video_url(std::string* video_url) {
  if (video_url != nullptr) {
    
  } else {
    
  }
  video_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.User.video_url)
}

// -------------------------------------------------------------------

// JokeRequest

// sint32 num = 1;
inline void JokeRequest::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JokeRequest::num() const {
  // @@protoc_insertion_point(field_get:wxhomework.JokeRequest.num)
  return num_;
}
inline void JokeRequest::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:wxhomework.JokeRequest.num)
}

// string account = 2;
inline void JokeRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JokeRequest::account() const {
  // @@protoc_insertion_point(field_get:wxhomework.JokeRequest.account)
  return account_.GetNoArena();
}
inline void JokeRequest::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.JokeRequest.account)
}
inline void JokeRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.JokeRequest.account)
}
inline void JokeRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.JokeRequest.account)
}
inline void JokeRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.JokeRequest.account)
}
inline std::string* JokeRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.JokeRequest.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JokeRequest::release_account() {
  // @@protoc_insertion_point(field_release:wxhomework.JokeRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JokeRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.JokeRequest.account)
}

// string token = 3;
inline void JokeRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JokeRequest::token() const {
  // @@protoc_insertion_point(field_get:wxhomework.JokeRequest.token)
  return token_.GetNoArena();
}
inline void JokeRequest::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.JokeRequest.token)
}
inline void JokeRequest::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.JokeRequest.token)
}
inline void JokeRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.JokeRequest.token)
}
inline void JokeRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.JokeRequest.token)
}
inline std::string* JokeRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.JokeRequest.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JokeRequest::release_token() {
  // @@protoc_insertion_point(field_release:wxhomework.JokeRequest.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JokeRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.JokeRequest.token)
}

// -------------------------------------------------------------------

// JokeResponse

// string jokeId = 1;
inline void JokeResponse::clear_jokeid() {
  jokeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JokeResponse::jokeid() const {
  // @@protoc_insertion_point(field_get:wxhomework.JokeResponse.jokeId)
  return jokeid_.GetNoArena();
}
inline void JokeResponse::set_jokeid(const std::string& value) {
  
  jokeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.JokeResponse.jokeId)
}
inline void JokeResponse::set_jokeid(std::string&& value) {
  
  jokeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.JokeResponse.jokeId)
}
inline void JokeResponse::set_jokeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jokeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.JokeResponse.jokeId)
}
inline void JokeResponse::set_jokeid(const char* value, size_t size) {
  
  jokeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.JokeResponse.jokeId)
}
inline std::string* JokeResponse::mutable_jokeid() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.JokeResponse.jokeId)
  return jokeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JokeResponse::release_jokeid() {
  // @@protoc_insertion_point(field_release:wxhomework.JokeResponse.jokeId)
  
  return jokeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JokeResponse::set_allocated_jokeid(std::string* jokeid) {
  if (jokeid != nullptr) {
    
  } else {
    
  }
  jokeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jokeid);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.JokeResponse.jokeId)
}

// string joke_content = 2;
inline void JokeResponse::clear_joke_content() {
  joke_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JokeResponse::joke_content() const {
  // @@protoc_insertion_point(field_get:wxhomework.JokeResponse.joke_content)
  return joke_content_.GetNoArena();
}
inline void JokeResponse::set_joke_content(const std::string& value) {
  
  joke_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wxhomework.JokeResponse.joke_content)
}
inline void JokeResponse::set_joke_content(std::string&& value) {
  
  joke_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wxhomework.JokeResponse.joke_content)
}
inline void JokeResponse::set_joke_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  joke_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wxhomework.JokeResponse.joke_content)
}
inline void JokeResponse::set_joke_content(const char* value, size_t size) {
  
  joke_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wxhomework.JokeResponse.joke_content)
}
inline std::string* JokeResponse::mutable_joke_content() {
  
  // @@protoc_insertion_point(field_mutable:wxhomework.JokeResponse.joke_content)
  return joke_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JokeResponse::release_joke_content() {
  // @@protoc_insertion_point(field_release:wxhomework.JokeResponse.joke_content)
  
  return joke_content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JokeResponse::set_allocated_joke_content(std::string* joke_content) {
  if (joke_content != nullptr) {
    
  } else {
    
  }
  joke_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), joke_content);
  // @@protoc_insertion_point(field_set_allocated:wxhomework.JokeResponse.joke_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wxhomework

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fwxhomework_2eproto
